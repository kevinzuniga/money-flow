"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/health";
exports.ids = ["pages/api/health"];
exports.modules = {

/***/ "(api-node)/./lib/api/router.js":
/*!***************************!*\
  !*** ./lib/api/router.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createRoute: () => (/* binding */ createRoute),\n/* harmony export */   extractQueryParams: () => (/* binding */ extractQueryParams),\n/* harmony export */   formatPaginated: () => (/* binding */ formatPaginated),\n/* harmony export */   formatSuccess: () => (/* binding */ formatSuccess),\n/* harmony export */   handleCors: () => (/* binding */ handleCors),\n/* harmony export */   handlers: () => (/* binding */ handlers),\n/* harmony export */   logRequest: () => (/* binding */ logRequest),\n/* harmony export */   registerRoutes: () => (/* binding */ registerRoutes)\n/* harmony export */ });\n/* harmony import */ var _middleware_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../middleware/error */ \"(api-node)/./lib/middleware/error.js\");\n/* harmony import */ var _middleware_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../middleware/auth */ \"(api-node)/./lib/middleware/auth.js\");\n/**\n * API Router\n * \n * Provides utilities for consistent API route handling, including\n * middleware application, response formatting, and error handling.\n */ \n\n/**\n * Format a successful API response\n * \n * @param {any} data - The data to include in the response\n * @param {string} message - Optional success message\n * @param {Object} meta - Optional metadata (pagination, etc.)\n * @returns {Object} - Formatted success response\n */ const formatSuccess = (data, message = null, meta = null)=>{\n    const response = {\n        success: true\n    };\n    if (message) {\n        response.message = message;\n    }\n    if (data !== undefined) {\n        response.data = data;\n    }\n    if (meta) {\n        response.meta = meta;\n    }\n    return response;\n};\n/**\n * Format a successful paginated API response\n * \n * @param {Array} items - The array of items\n * @param {number} page - Current page number\n * @param {number} limit - Items per page\n * @param {number} total - Total number of items\n * @param {string} message - Optional success message\n * @returns {Object} - Formatted paginated response\n */ const formatPaginated = (items, page, limit, total, message = null)=>{\n    const totalPages = Math.ceil(total / limit);\n    return formatSuccess({\n        items\n    }, message, {\n        pagination: {\n            page,\n            limit,\n            total,\n            totalPages,\n            hasNextPage: page < totalPages,\n            hasPrevPage: page > 1\n        }\n    });\n};\n/**\n * Log API request details\n * \n * @param {Object} req - The request object\n */ const logRequest = (req)=>{\n    if (true) {\n        console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);\n        if (req.query && Object.keys(req.query).length > 0) {\n            console.log('  Query:', req.query);\n        }\n        if (req.body && Object.keys(req.body).length > 0) {\n            console.log('  Body:', JSON.stringify(req.body).substring(0, 200));\n        }\n        if (req.userId) {\n            console.log('  User:', req.userId);\n        }\n    }\n};\n/**\n * Handle CORS pre-flight requests\n * \n * @param {Object} req - The request object\n * @param {Object} res - The response object\n * @returns {boolean} - True if handled as preflight, false otherwise\n */ const handleCors = (req, res)=>{\n    // Set CORS headers for all responses\n    res.setHeader('Access-Control-Allow-Origin', process.env.CORS_ORIGIN || '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-CSRF-Token');\n    res.setHeader('Access-Control-Allow-Credentials', 'true');\n    // Handle OPTIONS pre-flight request\n    if (req.method === 'OPTIONS') {\n        res.status(200).end();\n        return true;\n    }\n    return false;\n};\n/**\n * Create a route handler with consistent formatting and middleware\n * \n * @param {Function} handler - The route handler function\n * @param {Object} options - Options for the route\n * @param {boolean} options.auth - Whether auth is required (default: true)\n * @param {string|string[]} options.roles - Required roles, if any\n * @param {boolean} options.cors - Whether to enable CORS (default: true)\n * @param {boolean} options.csrf - Whether to enable CSRF protection (default: true)\n * @param {Object} options.rateLimit - Rate limiting options, if any\n * @returns {Function} - Enhanced route handler\n */ const createRoute = (handler, options = {})=>{\n    // Default options\n    const routeOptions = {\n        auth: true,\n        cors: true,\n        csrf: true,\n        ...options\n    };\n    // Create middleware stack based on options\n    const middleware = (0,_middleware_auth__WEBPACK_IMPORTED_MODULE_1__.secureRoute)(routeOptions);\n    // Return wrapped handler with middleware and error handling\n    return (0,_middleware_error__WEBPACK_IMPORTED_MODULE_0__.withErrorHandling)(async (req, res)=>{\n        try {\n            // Handle CORS if enabled\n            if (routeOptions.cors && handleCors(req, res)) {\n                return;\n            }\n            // Log request\n            logRequest(req);\n            // Apply middleware\n            if (middleware.length > 0) {\n                // Convert middleware chain to promise\n                await new Promise((resolve, reject)=>{\n                    // Track current middleware index\n                    let currentIndex = 0;\n                    // Create next function that moves to next middleware or resolves\n                    const next = (error)=>{\n                        if (error) {\n                            reject(error);\n                            return;\n                        }\n                        currentIndex++;\n                        if (currentIndex >= middleware.length) {\n                            resolve();\n                            return;\n                        }\n                        try {\n                            middleware[currentIndex](req, res, next);\n                        } catch (err) {\n                            reject(err);\n                        }\n                    };\n                    // Start middleware chain\n                    middleware[0](req, res, next);\n                });\n            }\n            // Call the actual route handler\n            return await handler(req, res);\n        } catch (error) {\n            // Let withErrorHandling handle any errors\n            throw error;\n        }\n    });\n};\n/**\n * Register routes with a router\n * \n * @param {Object} router - Next.js API router\n * @param {Object} routes - Routes configuration\n * @param {Function} routes.GET - GET request handler\n * @param {Function} routes.POST - POST request handler\n * @param {Function} routes.PUT - PUT request handler\n * @param {Function} routes.DELETE - DELETE request handler\n * @param {Object} options - Options for all routes\n * @returns {Function} - Router handler\n */ const registerRoutes = (routes, options = {})=>{\n    // Return Next.js API route handler\n    return async (req, res)=>{\n        const method = req.method || 'GET';\n        // Check if method is supported\n        if (routes[method]) {\n            // Create route handler with options\n            const handler = createRoute(routes[method], options);\n            // Call handler\n            return await handler(req, res);\n        }\n        // Method not allowed\n        res.setHeader('Allow', Object.keys(routes));\n        return res.status(405).json({\n            success: false,\n            message: 'Method not allowed'\n        });\n    };\n};\n/**\n * Utility to extract query parameters with defaults\n * \n * @param {Object} query - Next.js query object\n * @param {Object} defaults - Default values for params\n * @returns {Object} - Processed query parameters\n */ const extractQueryParams = (query, defaults = {})=>{\n    const params = {\n        ...defaults\n    };\n    // Process page and limit for pagination\n    if ('page' in query) {\n        params.page = parseInt(query.page, 10) || defaults.page || 1;\n    }\n    if ('limit' in query) {\n        params.limit = parseInt(query.limit, 10) || defaults.limit || 10;\n    }\n    // Process dates\n    if ('startDate' in query && query.startDate) {\n        params.startDate = query.startDate;\n    }\n    if ('endDate' in query && query.endDate) {\n        params.endDate = query.endDate;\n    }\n    // Process amount filters\n    if ('minAmount' in query && query.minAmount) {\n        params.minAmount = parseFloat(query.minAmount);\n    }\n    if ('maxAmount' in query && query.maxAmount) {\n        params.maxAmount = parseFloat(query.maxAmount);\n    }\n    // Process sorting\n    if ('sortBy' in query && query.sortBy) {\n        params.sortBy = query.sortBy;\n    }\n    if ('sortDir' in query && query.sortDir) {\n        params.sortDir = query.sortDir.toLowerCase() === 'asc' ? 'asc' : 'desc';\n    }\n    // Process other parameters\n    for(const key in query){\n        if (!(key in params)) {\n            params[key] = query[key];\n        }\n    }\n    return params;\n};\n/**\n * Common request handlers that can be reused across endpoints\n */ const handlers = {\n    /**\n   * Create a simple health check route handler\n   */ healthCheck: (req, res)=>{\n        res.status(200).json(formatSuccess({\n            status: 'healthy'\n        }, 'API is running'));\n    },\n    /**\n   * Create a simple documentation route handler\n   */ documentation: (docData)=>(req, res)=>{\n            res.status(200).json(formatSuccess(docData, 'API documentation'));\n        }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/api/router.js\n");

/***/ }),

/***/ "(api-node)/./lib/db.js":
/*!*******************!*\
  !*** ./lib/db.js ***!
  \*******************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([pg__WEBPACK_IMPORTED_MODULE_0__]);\npg__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Create PostgreSQL connection pool\nconst pool = new pg__WEBPACK_IMPORTED_MODULE_0__.Pool({\n    connectionString: process.env.DATABASE_URL || 'postgresql://postgres:password@localhost:5432/money_flow',\n    ssl:  false ? 0 : false\n});\n// Log database connection errors\npool.on('error', (err)=>{\n    console.error('Unexpected error on idle client', err);\n    process.exit(-1);\n});\n// Execute SQL query with parameters\nconst query = async (text, params = [])=>{\n    const start = Date.now();\n    try {\n        const res = await pool.query(text, params);\n        const duration = Date.now() - start;\n        // Log slow queries (> 200ms) for debugging\n        if (duration > 200) {\n            console.log('Slow query:', {\n                text,\n                duration,\n                rows: res.rowCount\n            });\n        }\n        return res;\n    } catch (error) {\n        console.error('Database query error:', error);\n        // Add more context to the error for debugging\n        error.query = text;\n        error.params = params;\n        throw error;\n    }\n};\n// Get a client from the pool for transactions\nconst getClient = async ()=>{\n    const client = await pool.connect();\n    // Monkey patch the query method to implement the same logic as above\n    const originalQuery = client.query;\n    client.query = async (text, params = [])=>{\n        const start = Date.now();\n        try {\n            const res = await originalQuery.call(client, text, params);\n            const duration = Date.now() - start;\n            if (duration > 200) {\n                console.log('Slow query in transaction:', {\n                    text,\n                    duration,\n                    rows: res.rowCount\n                });\n            }\n            return res;\n        } catch (error) {\n            console.error('Database transaction query error:', error);\n            error.query = text;\n            error.params = params;\n            throw error;\n        }\n    };\n    return client;\n};\n// Run a function within a transaction\nconst transaction = async (callback)=>{\n    const client = await getClient();\n    try {\n        await client.query('BEGIN');\n        const result = await callback(client);\n        await client.query('COMMIT');\n        return result;\n    } catch (error) {\n        await client.query('ROLLBACK');\n        throw error;\n    } finally{\n        client.release();\n    }\n};\n// Export database operations\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    query,\n    getClient,\n    transaction,\n    pool\n});\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9kYi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEwQjtBQUUxQixvQ0FBb0M7QUFDcEMsTUFBTUMsT0FBTyxJQUFJRCxvQ0FBSUEsQ0FBQztJQUNwQkUsa0JBQWtCQyxRQUFRQyxHQUFHLENBQUNDLFlBQVksSUFBSTtJQUM5Q0MsS0FBS0gsTUFBcUMsR0FBRyxDQUE2QixHQUFHO0FBQy9FO0FBRUEsaUNBQWlDO0FBQ2pDRixLQUFLTyxFQUFFLENBQUMsU0FBUyxDQUFDQztJQUNoQkMsUUFBUUMsS0FBSyxDQUFDLG1DQUFtQ0Y7SUFDakROLFFBQVFTLElBQUksQ0FBQyxDQUFDO0FBQ2hCO0FBRUEsb0NBQW9DO0FBQ3BDLE1BQU1DLFFBQVEsT0FBT0MsTUFBTUMsU0FBUyxFQUFFO0lBQ3BDLE1BQU1DLFFBQVFDLEtBQUtDLEdBQUc7SUFDdEIsSUFBSTtRQUNGLE1BQU1DLE1BQU0sTUFBTWxCLEtBQUtZLEtBQUssQ0FBQ0MsTUFBTUM7UUFDbkMsTUFBTUssV0FBV0gsS0FBS0MsR0FBRyxLQUFLRjtRQUU5QiwyQ0FBMkM7UUFDM0MsSUFBSUksV0FBVyxLQUFLO1lBQ2xCVixRQUFRVyxHQUFHLENBQUMsZUFBZTtnQkFBRVA7Z0JBQU1NO2dCQUFVRSxNQUFNSCxJQUFJSSxRQUFRO1lBQUM7UUFDbEU7UUFFQSxPQUFPSjtJQUNULEVBQUUsT0FBT1IsT0FBTztRQUNkRCxRQUFRQyxLQUFLLENBQUMseUJBQXlCQTtRQUV2Qyw4Q0FBOEM7UUFDOUNBLE1BQU1FLEtBQUssR0FBR0M7UUFDZEgsTUFBTUksTUFBTSxHQUFHQTtRQUVmLE1BQU1KO0lBQ1I7QUFDRjtBQUVBLDhDQUE4QztBQUM5QyxNQUFNYSxZQUFZO0lBQ2hCLE1BQU1DLFNBQVMsTUFBTXhCLEtBQUt5QixPQUFPO0lBRWpDLHFFQUFxRTtJQUNyRSxNQUFNQyxnQkFBZ0JGLE9BQU9aLEtBQUs7SUFDbENZLE9BQU9aLEtBQUssR0FBRyxPQUFPQyxNQUFNQyxTQUFTLEVBQUU7UUFDckMsTUFBTUMsUUFBUUMsS0FBS0MsR0FBRztRQUN0QixJQUFJO1lBQ0YsTUFBTUMsTUFBTSxNQUFNUSxjQUFjQyxJQUFJLENBQUNILFFBQVFYLE1BQU1DO1lBQ25ELE1BQU1LLFdBQVdILEtBQUtDLEdBQUcsS0FBS0Y7WUFFOUIsSUFBSUksV0FBVyxLQUFLO2dCQUNsQlYsUUFBUVcsR0FBRyxDQUFDLDhCQUE4QjtvQkFBRVA7b0JBQU1NO29CQUFVRSxNQUFNSCxJQUFJSSxRQUFRO2dCQUFDO1lBQ2pGO1lBRUEsT0FBT0o7UUFDVCxFQUFFLE9BQU9SLE9BQU87WUFDZEQsUUFBUUMsS0FBSyxDQUFDLHFDQUFxQ0E7WUFDbkRBLE1BQU1FLEtBQUssR0FBR0M7WUFDZEgsTUFBTUksTUFBTSxHQUFHQTtZQUNmLE1BQU1KO1FBQ1I7SUFDRjtJQUVBLE9BQU9jO0FBQ1Q7QUFFQSxzQ0FBc0M7QUFDdEMsTUFBTUksY0FBYyxPQUFPQztJQUN6QixNQUFNTCxTQUFTLE1BQU1EO0lBRXJCLElBQUk7UUFDRixNQUFNQyxPQUFPWixLQUFLLENBQUM7UUFDbkIsTUFBTWtCLFNBQVMsTUFBTUQsU0FBU0w7UUFDOUIsTUFBTUEsT0FBT1osS0FBSyxDQUFDO1FBQ25CLE9BQU9rQjtJQUNULEVBQUUsT0FBT3BCLE9BQU87UUFDZCxNQUFNYyxPQUFPWixLQUFLLENBQUM7UUFDbkIsTUFBTUY7SUFDUixTQUFVO1FBQ1JjLE9BQU9PLE9BQU87SUFDaEI7QUFDRjtBQUVBLDZCQUE2QjtBQUM3QixpRUFBZTtJQUNibkI7SUFDQVc7SUFDQUs7SUFDQTVCO0FBQ0YsQ0FBQyxFQUFDIiwic291cmNlcyI6WyIvVXNlcnMva2V2aW56dW5pZ2EvRGV2ZWxvcG1lbnQva2V2aW4vZmxvd2FwcC9tb25leS1mbG93L2xpYi9kYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb29sIH0gZnJvbSAncGcnO1xuXG4vLyBDcmVhdGUgUG9zdGdyZVNRTCBjb25uZWN0aW9uIHBvb2xcbmNvbnN0IHBvb2wgPSBuZXcgUG9vbCh7XG4gIGNvbm5lY3Rpb25TdHJpbmc6IHByb2Nlc3MuZW52LkRBVEFCQVNFX1VSTCB8fCAncG9zdGdyZXNxbDovL3Bvc3RncmVzOnBhc3N3b3JkQGxvY2FsaG9zdDo1NDMyL21vbmV5X2Zsb3cnLFxuICBzc2w6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgPyB7IHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2UgfSA6IGZhbHNlXG59KTtcblxuLy8gTG9nIGRhdGFiYXNlIGNvbm5lY3Rpb24gZXJyb3JzXG5wb29sLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCBlcnJvciBvbiBpZGxlIGNsaWVudCcsIGVycik7XG4gIHByb2Nlc3MuZXhpdCgtMSk7XG59KTtcblxuLy8gRXhlY3V0ZSBTUUwgcXVlcnkgd2l0aCBwYXJhbWV0ZXJzXG5jb25zdCBxdWVyeSA9IGFzeW5jICh0ZXh0LCBwYXJhbXMgPSBbXSkgPT4ge1xuICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgcG9vbC5xdWVyeSh0ZXh0LCBwYXJhbXMpO1xuICAgIGNvbnN0IGR1cmF0aW9uID0gRGF0ZS5ub3coKSAtIHN0YXJ0O1xuICAgIFxuICAgIC8vIExvZyBzbG93IHF1ZXJpZXMgKD4gMjAwbXMpIGZvciBkZWJ1Z2dpbmdcbiAgICBpZiAoZHVyYXRpb24gPiAyMDApIHtcbiAgICAgIGNvbnNvbGUubG9nKCdTbG93IHF1ZXJ5OicsIHsgdGV4dCwgZHVyYXRpb24sIHJvd3M6IHJlcy5yb3dDb3VudCB9KTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJlcztcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdEYXRhYmFzZSBxdWVyeSBlcnJvcjonLCBlcnJvcik7XG4gICAgXG4gICAgLy8gQWRkIG1vcmUgY29udGV4dCB0byB0aGUgZXJyb3IgZm9yIGRlYnVnZ2luZ1xuICAgIGVycm9yLnF1ZXJ5ID0gdGV4dDtcbiAgICBlcnJvci5wYXJhbXMgPSBwYXJhbXM7XG4gICAgXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbi8vIEdldCBhIGNsaWVudCBmcm9tIHRoZSBwb29sIGZvciB0cmFuc2FjdGlvbnNcbmNvbnN0IGdldENsaWVudCA9IGFzeW5jICgpID0+IHtcbiAgY29uc3QgY2xpZW50ID0gYXdhaXQgcG9vbC5jb25uZWN0KCk7XG4gIFxuICAvLyBNb25rZXkgcGF0Y2ggdGhlIHF1ZXJ5IG1ldGhvZCB0byBpbXBsZW1lbnQgdGhlIHNhbWUgbG9naWMgYXMgYWJvdmVcbiAgY29uc3Qgb3JpZ2luYWxRdWVyeSA9IGNsaWVudC5xdWVyeTtcbiAgY2xpZW50LnF1ZXJ5ID0gYXN5bmMgKHRleHQsIHBhcmFtcyA9IFtdKSA9PiB7XG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBvcmlnaW5hbFF1ZXJ5LmNhbGwoY2xpZW50LCB0ZXh0LCBwYXJhbXMpO1xuICAgICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnQ7XG4gICAgICBcbiAgICAgIGlmIChkdXJhdGlvbiA+IDIwMCkge1xuICAgICAgICBjb25zb2xlLmxvZygnU2xvdyBxdWVyeSBpbiB0cmFuc2FjdGlvbjonLCB7IHRleHQsIGR1cmF0aW9uLCByb3dzOiByZXMucm93Q291bnQgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiByZXM7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIHRyYW5zYWN0aW9uIHF1ZXJ5IGVycm9yOicsIGVycm9yKTtcbiAgICAgIGVycm9yLnF1ZXJ5ID0gdGV4dDtcbiAgICAgIGVycm9yLnBhcmFtcyA9IHBhcmFtcztcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfTtcbiAgXG4gIHJldHVybiBjbGllbnQ7XG59O1xuXG4vLyBSdW4gYSBmdW5jdGlvbiB3aXRoaW4gYSB0cmFuc2FjdGlvblxuY29uc3QgdHJhbnNhY3Rpb24gPSBhc3luYyAoY2FsbGJhY2spID0+IHtcbiAgY29uc3QgY2xpZW50ID0gYXdhaXQgZ2V0Q2xpZW50KCk7XG4gIFxuICB0cnkge1xuICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnQkVHSU4nKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYWxsYmFjayhjbGllbnQpO1xuICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnQ09NTUlUJyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBhd2FpdCBjbGllbnQucXVlcnkoJ1JPTExCQUNLJyk7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH0gZmluYWxseSB7XG4gICAgY2xpZW50LnJlbGVhc2UoKTtcbiAgfVxufTtcblxuLy8gRXhwb3J0IGRhdGFiYXNlIG9wZXJhdGlvbnNcbmV4cG9ydCBkZWZhdWx0IHtcbiAgcXVlcnksXG4gIGdldENsaWVudCxcbiAgdHJhbnNhY3Rpb24sXG4gIHBvb2xcbn07XG4iXSwibmFtZXMiOlsiUG9vbCIsInBvb2wiLCJjb25uZWN0aW9uU3RyaW5nIiwicHJvY2VzcyIsImVudiIsIkRBVEFCQVNFX1VSTCIsInNzbCIsInJlamVjdFVuYXV0aG9yaXplZCIsIm9uIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiZXhpdCIsInF1ZXJ5IiwidGV4dCIsInBhcmFtcyIsInN0YXJ0IiwiRGF0ZSIsIm5vdyIsInJlcyIsImR1cmF0aW9uIiwibG9nIiwicm93cyIsInJvd0NvdW50IiwiZ2V0Q2xpZW50IiwiY2xpZW50IiwiY29ubmVjdCIsIm9yaWdpbmFsUXVlcnkiLCJjYWxsIiwidHJhbnNhY3Rpb24iLCJjYWxsYmFjayIsInJlc3VsdCIsInJlbGVhc2UiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./lib/db.js\n");

/***/ }),

/***/ "(api-node)/./lib/middleware/auth.js":
/*!********************************!*\
  !*** ./lib/middleware/auth.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authenticate: () => (/* binding */ authenticate),\n/* harmony export */   csrfProtection: () => (/* binding */ csrfProtection),\n/* harmony export */   extractToken: () => (/* binding */ extractToken),\n/* harmony export */   generateCsrfToken: () => (/* binding */ generateCsrfToken),\n/* harmony export */   rateLimiter: () => (/* binding */ rateLimiter),\n/* harmony export */   requireRoles: () => (/* binding */ requireRoles),\n/* harmony export */   secureRoute: () => (/* binding */ secureRoute),\n/* harmony export */   validateSession: () => (/* binding */ validateSession),\n/* harmony export */   verifyToken: () => (/* binding */ verifyToken)\n/* harmony export */ });\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var cookie__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cookie */ \"cookie\");\n/* harmony import */ var cookie__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cookie__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error */ \"(api-node)/./lib/middleware/error.js\");\n/**\n * Authentication Middleware\n * \n * This module provides authentication and authorization middleware\n * for securing API routes, including JWT validation, role-based\n * access control, and rate limiting.\n */ \n\n\n\n// In-memory cache for rate limiting (use Redis in production)\nconst rateLimit = {\n    requests: {},\n    tokens: {}\n};\n/**\n * Extract JWT token from request\n * \n * @param {Object} req - The request object\n * @returns {string|null} - JWT token or null if not found\n */ const extractToken = (req)=>{\n    // Check authorization header\n    const authHeader = req.headers.authorization;\n    if (authHeader && authHeader.startsWith('Bearer ')) {\n        return authHeader.substring(7);\n    }\n    // Check cookies\n    const cookies = cookie__WEBPACK_IMPORTED_MODULE_1___default().parse(req.headers.cookie || '');\n    if (cookies.token) {\n        return cookies.token;\n    }\n    return null;\n};\n/**\n * Verify and decode JWT token\n * \n * @param {string} token - JWT token to verify\n * @returns {Object} - Decoded token payload\n * @throws {UnauthorizedError} - If token is invalid\n */ const verifyToken = (token)=>{\n    try {\n        return jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().verify(token, process.env.JWT_SECRET || 'your-secret-key');\n    } catch (error) {\n        throw new _error__WEBPACK_IMPORTED_MODULE_3__.UnauthorizedError('Token inválido o expirado');\n    }\n};\n/**\n * Authentication middleware - validates JWT token and adds user info to request\n * \n * @param {Object} req - The request object\n * @param {Object} res - The response object\n * @param {Function} next - The next middleware function\n * @returns {Promise<void>} - Calls next() if authentication is successful\n * @throws {UnauthorizedError} - If authentication fails\n */ const authenticate = async (req, res)=>{\n    try {\n        // Extract token\n        const token = extractToken(req);\n        if (!token) {\n            throw new _error__WEBPACK_IMPORTED_MODULE_3__.UnauthorizedError('No se proporcionó token de autenticación');\n        }\n        // Verify token\n        const decoded = verifyToken(token);\n        // Add user info to request\n        req.userId = decoded.userId;\n        req.userEmail = decoded.email;\n        req.userRoles = decoded.roles || [\n            'user'\n        ];\n        return decoded.userId;\n    } catch (error) {\n        // If error is already an UnauthorizedError, pass it through\n        if (error instanceof _error__WEBPACK_IMPORTED_MODULE_3__.UnauthorizedError) {\n            throw error;\n        }\n        // Otherwise, wrap it in an UnauthorizedError\n        throw new _error__WEBPACK_IMPORTED_MODULE_3__.UnauthorizedError('Autenticación fallida: ' + error.message);\n    }\n};\n/**\n * Role-based access control middleware\n * \n * @param {string|string[]} roles - Required role(s) for access\n * @returns {Function} - Middleware function\n */ const requireRoles = (roles)=>{\n    // Convert single role to array\n    const requiredRoles = Array.isArray(roles) ? roles : [\n        roles\n    ];\n    return async (req, res, next)=>{\n        try {\n            // First authenticate the user\n            await authenticate(req, res);\n            // Check if user has required role(s)\n            const hasRequiredRole = req.userRoles.some((role)=>requiredRoles.includes(role) || role === 'admin');\n            if (!hasRequiredRole) {\n                throw new _error__WEBPACK_IMPORTED_MODULE_3__.ForbiddenError('No tienes permisos para realizar esta acción');\n            }\n            // User has required role, proceed\n            next();\n        } catch (error) {\n            next(error);\n        }\n    };\n};\n/**\n * Rate limiting middleware to prevent abuse\n * \n * @param {Object} options - Rate limiting options\n * @param {number} options.maxRequests - Maximum requests per window (default: 100)\n * @param {number} options.windowMs - Time window in milliseconds (default: 60000)\n * @param {string} options.keyGenerator - Function to generate cache key (default: IP address)\n * @returns {Function} - Middleware function\n */ const rateLimiter = (options = {})=>{\n    const { maxRequests = 100, windowMs = 60 * 1000, keyGenerator = (req)=>req.ip || req.headers['x-forwarded-for'] || 'unknown' } = options;\n    return (req, res, next)=>{\n        try {\n            // Generate cache key\n            const key = keyGenerator(req);\n            // Initialize or get current requests count\n            if (!rateLimit.requests[key]) {\n                rateLimit.requests[key] = {\n                    count: 0,\n                    resetAt: Date.now() + windowMs\n                };\n                // Set timeout to reset count after window expires\n                setTimeout(()=>{\n                    delete rateLimit.requests[key];\n                }, windowMs);\n            }\n            // Check if over limit\n            if (rateLimit.requests[key].count >= maxRequests) {\n                // Calculate remaining time until reset\n                const resetIn = rateLimit.requests[key].resetAt - Date.now();\n                // Set rate limit headers\n                res.setHeader('X-RateLimit-Limit', maxRequests);\n                res.setHeader('X-RateLimit-Remaining', 0);\n                res.setHeader('X-RateLimit-Reset', Math.ceil(resetIn / 1000));\n                throw new _error__WEBPACK_IMPORTED_MODULE_3__.RateLimitError(`Demasiadas solicitudes. Intente de nuevo en ${Math.ceil(resetIn / 1000)} segundos.`);\n            }\n            // Increment request count\n            rateLimit.requests[key].count++;\n            // Set rate limit headers\n            res.setHeader('X-RateLimit-Limit', maxRequests);\n            res.setHeader('X-RateLimit-Remaining', Math.max(0, maxRequests - rateLimit.requests[key].count));\n            res.setHeader('X-RateLimit-Reset', Math.ceil((rateLimit.requests[key].resetAt - Date.now()) / 1000));\n            next();\n        } catch (error) {\n            next(error);\n        }\n    };\n};\n/**\n * CSRF protection middleware\n * \n * @param {Object} req - The request object\n * @param {Object} res - The response object\n * @param {Function} next - The next middleware function\n */ const csrfProtection = (req, res, next)=>{\n    // Skip CSRF check for GET, HEAD, OPTIONS requests\n    if ([\n        'GET',\n        'HEAD',\n        'OPTIONS'\n    ].includes(req.method)) {\n        return next();\n    }\n    try {\n        // Get CSRF token from header or form\n        const csrfToken = req.headers['x-csrf-token'] || req.body?._csrf;\n        // Get user's stored CSRF token from session/cookie\n        const cookies = cookie__WEBPACK_IMPORTED_MODULE_1___default().parse(req.headers.cookie || '');\n        const storedToken = cookies.csrfToken;\n        // Validate CSRF token\n        if (!csrfToken || !storedToken || csrfToken !== storedToken) {\n            throw new _error__WEBPACK_IMPORTED_MODULE_3__.ForbiddenError('CSRF token inválido o faltante');\n        }\n        next();\n    } catch (error) {\n        next(error);\n    }\n};\n/**\n * Generate a CSRF token for a user\n * \n * @param {Object} res - The response object\n * @returns {string} - Generated CSRF token\n */ const generateCsrfToken = (res)=>{\n    // Generate random token\n    const token = crypto__WEBPACK_IMPORTED_MODULE_2___default().randomBytes(32).toString('hex');\n    // Set CSRF cookie (HTTP-only: false so JS can read it)\n    res.setHeader('Set-Cookie', cookie__WEBPACK_IMPORTED_MODULE_1___default().serialize('csrfToken', token, {\n        httpOnly: false,\n        secure: \"development\" === 'production',\n        maxAge: 24 * 60 * 60,\n        path: '/',\n        sameSite: 'strict'\n    }));\n    return token;\n};\n/**\n * Session validation middleware\n * \n * @param {Object} req - The request object\n * @param {Object} res - The response object\n * @param {Function} next - The next middleware function\n */ const validateSession = async (req, res, next)=>{\n    try {\n        // Extract user ID from token\n        await authenticate(req, res);\n        // In a real app, you would check if session is valid in database\n        // For simplicity, we'll just check if the token exists\n        // Add session info to request\n        req.session = {\n            isValid: true,\n            userId: req.userId,\n            lastAccessed: new Date()\n        };\n        next();\n    } catch (error) {\n        next(error);\n    }\n};\n/**\n * Combined middleware that applies multiple security features\n * \n * @param {Object} options - Options for security features\n * @returns {Function[]} - Array of middleware functions\n */ const secureRoute = (options = {})=>{\n    const middleware = [];\n    // Apply rate limiting if enabled\n    if (options.rateLimit !== false) {\n        middleware.push(rateLimiter(options.rateLimit));\n    }\n    // Apply CSRF protection if enabled\n    if (options.csrf !== false) {\n        middleware.push(csrfProtection);\n    }\n    // Apply authentication middleware if enabled\n    if (options.auth !== false) {\n        middleware.push(validateSession);\n    }\n    // Apply role-based access control if roles are specified\n    if (options.roles) {\n        middleware.push(requireRoles(options.roles));\n    }\n    return middleware;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/middleware/auth.js\n");

/***/ }),

/***/ "(api-node)/./lib/middleware/error.js":
/*!*********************************!*\
  !*** ./lib/middleware/error.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiError: () => (/* binding */ ApiError),\n/* harmony export */   BadRequestError: () => (/* binding */ BadRequestError),\n/* harmony export */   ForbiddenError: () => (/* binding */ ForbiddenError),\n/* harmony export */   InternalServerError: () => (/* binding */ InternalServerError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   RateLimitError: () => (/* binding */ RateLimitError),\n/* harmony export */   UnauthorizedError: () => (/* binding */ UnauthorizedError),\n/* harmony export */   ValidationError: () => (/* binding */ ValidationError),\n/* harmony export */   formatErrorResponse: () => (/* binding */ formatErrorResponse),\n/* harmony export */   handleApiError: () => (/* binding */ handleApiError),\n/* harmony export */   logError: () => (/* binding */ logError),\n/* harmony export */   withErrorHandling: () => (/* binding */ withErrorHandling)\n/* harmony export */ });\n/**\n * Error handling middleware and custom error classes\n * \n * This module provides centralized error handling for the API,\n * including custom error classes and error formatting.\n */ /**\n * Base API Error class that extends Error with additional properties\n */ class ApiError extends Error {\n    constructor(message, statusCode, errors = null){\n        super(message);\n        this.statusCode = statusCode;\n        this.errors = errors;\n        this.name = this.constructor.name;\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\n/**\n * 400 Bad Request - Used for invalid input, missing required parameters, etc.\n */ class BadRequestError extends ApiError {\n    constructor(message = 'Bad Request', errors = null){\n        super(message, 400, errors);\n    }\n}\n/**\n * 401 Unauthorized - Used for authentication failures\n */ class UnauthorizedError extends ApiError {\n    constructor(message = 'No autorizado', errors = null){\n        super(message, 401, errors);\n    }\n}\n/**\n * 403 Forbidden - Used for authorization failures (authenticated but not allowed)\n */ class ForbiddenError extends ApiError {\n    constructor(message = 'Acceso prohibido', errors = null){\n        super(message, 403, errors);\n    }\n}\n/**\n * 404 Not Found - Used when resource is not found\n */ class NotFoundError extends ApiError {\n    constructor(message = 'Recurso no encontrado', errors = null){\n        super(message, 404, errors);\n    }\n}\n/**\n * 422 Unprocessable Entity - Used for validation errors\n */ class ValidationError extends ApiError {\n    constructor(message = 'Error de validación', errors = null){\n        super(message, 422, errors);\n    }\n}\n/**\n * 429 Too Many Requests - Used for rate limiting\n */ class RateLimitError extends ApiError {\n    constructor(message = 'Demasiadas solicitudes', errors = null){\n        super(message, 429, errors);\n    }\n}\n/**\n * 500 Internal Server Error - Used for server errors\n */ class InternalServerError extends ApiError {\n    constructor(message = 'Error interno del servidor', errors = null){\n        super(message, 500, errors);\n    }\n}\n/**\n * Log an error with contextual information\n * \n * @param {Error} error - The error to log\n * @param {Object} req - The request object\n */ const logError = (error, req = null)=>{\n    const timestamp = new Date().toISOString();\n    const errorType = error.name || 'Error';\n    const path = req ? `${req.method} ${req.url}` : 'Unknown path';\n    const userId = req && req.userId ? req.userId : 'Unauthenticated';\n    // Basic error information for the log\n    const logData = {\n        timestamp,\n        errorType,\n        message: error.message,\n        path,\n        userId,\n        statusCode: error.statusCode || 500\n    };\n    // Add stack trace in development\n    if (true) {\n        logData.stack = error.stack;\n    }\n    // Add validation errors if available\n    if (error.errors) {\n        logData.validationErrors = error.errors;\n    }\n    // Log the error\n    console.error('API ERROR:', logData);\n};\n/**\n * Format an error response to be sent to the client\n * \n * @param {Error} error - The error to format\n * @param {boolean} includeDetails - Whether to include error details (for development)\n * @returns {Object} - Formatted error response\n */ const formatErrorResponse = (error, includeDetails = false)=>{\n    // Default error response\n    const errorResponse = {\n        success: false,\n        message: error.message || 'An unexpected error occurred',\n        statusCode: error.statusCode || 500\n    };\n    // Include validation errors if available\n    if (error.errors) {\n        errorResponse.errors = error.errors;\n    }\n    // Include error details in development\n    if (includeDetails && \"development\" !== 'production') {\n        errorResponse.stack = error.stack;\n        errorResponse.name = error.name;\n    }\n    return errorResponse;\n};\n/**\n * Error handling middleware for API routes\n * \n * @param {Error} error - The error that occurred\n * @param {Object} req - The request object\n * @param {Object} res - The response object\n * @returns {Object} - Error response\n */ const handleApiError = (error, req, res)=>{\n    // Log the error\n    logError(error, req);\n    // Determine error status code (default to 500)\n    const statusCode = error.statusCode || 500;\n    // Format error response including details in non-production environments\n    const errorResponse = formatErrorResponse(error, \"development\" !== 'production');\n    // Send error response\n    return res.status(statusCode).json(errorResponse);\n};\n/**\n * Middleware to handle specific types of errors in API routes\n * \n * @param {Function} handler - The API route handler\n * @returns {Function} - Enhanced handler with error handling\n */ const withErrorHandling = (handler)=>{\n    return async (req, res)=>{\n        try {\n            return await handler(req, res);\n        } catch (error) {\n            return handleApiError(error, req, res);\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/middleware/error.js\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fhealth&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fhealth.js&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fhealth&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fhealth.js&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_health_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/health.js */ \"(api-node)/./pages/api/health.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_health_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_health_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_health_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_health_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/health\",\n        pathname: \"/api/health\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_health_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGaGVhbHRoJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZoZWFsdGguanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ0U7QUFDMUQ7QUFDa0Q7QUFDbEQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLGlEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxpREFBUTtBQUNwQztBQUNPLHdCQUF3Qix5R0FBbUI7QUFDbEQ7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzL2FwaS9oZWFsdGguanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgJ2RlZmF1bHQnKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsICdjb25maWcnKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2hlYWx0aFwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2hlYWx0aFwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fhealth&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fhealth.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/health.js":
/*!*****************************!*\
  !*** ./pages/api/health.js ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/db */ \"(api-node)/./lib/db.js\");\n/* harmony import */ var _lib_api_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/api/router */ \"(api-node)/./lib/api/router.js\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(os__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_db__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/**\n * API Health Check Endpoint\n * \n * Provides health status information about the API service, including:\n * - Database connection status\n * - System status\n * - Performance metrics\n * - Environment information\n */ \n\n\n/**\n * Calculate system uptime in a human-readable format\n * \n * @returns {string} Human readable uptime\n */ function getReadableUptime() {\n    const uptimeSec = os__WEBPACK_IMPORTED_MODULE_2___default().uptime();\n    const days = Math.floor(uptimeSec / (3600 * 24));\n    const hours = Math.floor(uptimeSec % (3600 * 24) / 3600);\n    const minutes = Math.floor(uptimeSec % 3600 / 60);\n    const seconds = Math.floor(uptimeSec % 60);\n    return `${days}d ${hours}h ${minutes}m ${seconds}s`;\n}\n/**\n * Get system resource usage metrics\n * \n * @returns {Object} System metrics\n */ function getSystemMetrics() {\n    const totalMem = os__WEBPACK_IMPORTED_MODULE_2___default().totalmem();\n    const freeMem = os__WEBPACK_IMPORTED_MODULE_2___default().freemem();\n    const usedMem = totalMem - freeMem;\n    return {\n        cpu: {\n            cores: os__WEBPACK_IMPORTED_MODULE_2___default().cpus().length,\n            model: os__WEBPACK_IMPORTED_MODULE_2___default().cpus()[0].model,\n            load: os__WEBPACK_IMPORTED_MODULE_2___default().loadavg()\n        },\n        memory: {\n            total: Math.round(totalMem / (1024 * 1024)) + 'MB',\n            free: Math.round(freeMem / (1024 * 1024)) + 'MB',\n            used: Math.round(usedMem / (1024 * 1024)) + 'MB',\n            usagePercentage: Math.round(usedMem / totalMem * 100) + '%'\n        },\n        uptime: getReadableUptime(),\n        platform: os__WEBPACK_IMPORTED_MODULE_2___default().platform(),\n        hostname: os__WEBPACK_IMPORTED_MODULE_2___default().hostname(),\n        nodeVersion: process.version\n    };\n}\n/**\n * Handle GET request for health status\n * \n * @param {Object} req - The request object\n * @param {Object} res - The response object\n */ async function getHealthStatus(req, res) {\n    const startTime = process.hrtime();\n    // Check database connection\n    let dbStatus = 'ok';\n    let dbResponseTime = 0;\n    try {\n        const dbStartTime = process.hrtime();\n        await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query('SELECT 1');\n        const dbTimeDiff = process.hrtime(dbStartTime);\n        dbResponseTime = (dbTimeDiff[0] * 1e9 + dbTimeDiff[1]) / 1e6; // Convert to ms\n    } catch (error) {\n        dbStatus = 'error';\n        console.error('Database health check failed:', error);\n    }\n    // Calculate API response time\n    const timeDiff = process.hrtime(startTime);\n    const responseTime = (timeDiff[0] * 1e9 + timeDiff[1]) / 1e6; // Convert to ms\n    // Get version information\n    const appVersion = process.env.npm_package_version || '1.0.0';\n    // Compile health information\n    const healthInfo = {\n        status: dbStatus === 'ok' ? 'ok' : 'degraded',\n        timestamp: new Date().toISOString(),\n        version: appVersion,\n        environment: \"development\" || 0,\n        database: {\n            status: dbStatus,\n            responseTime: `${dbResponseTime.toFixed(2)}ms`\n        },\n        system: getSystemMetrics(),\n        performance: {\n            responseTime: `${responseTime.toFixed(2)}ms`\n        }\n    };\n    return res.status(200).json((0,_lib_api_router__WEBPACK_IMPORTED_MODULE_1__.formatSuccess)(healthInfo, 'Health check completed'));\n}\n// Register the health check route with minimal middleware\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_api_router__WEBPACK_IMPORTED_MODULE_1__.registerRoutes)({\n    GET: getHealthStatus\n}, {\n    // No auth required for health checks\n    auth: false,\n    // Apply rate limiting to prevent abuse\n    rateLimit: {\n        maxRequests: 60,\n        windowMs: 60 * 1000 // 1 minute\n    }\n}));\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/health.js\n");

/***/ }),

/***/ "cookie":
/*!*************************!*\
  !*** external "cookie" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("cookie");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("jsonwebtoken");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = import("pg");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fhealth&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fhealth.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();