name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: money_flow_test
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create required directories
      run: |
        mkdir -p coverage

    - name: Setup environment variables
      run: |
        cp .env.example .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/money_flow_test" >> .env.test
        echo "JWT_SECRET=test-jwt-secret" >> .env.test
        echo "NEXTAUTH_SECRET=test-nextauth-secret" >> .env.test
    
    - name: Initialize testing database
      run: |
        npm run db:init
        npm run db:seed
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/money_flow_test
        
    - name: Run linting
      run: npm run lint
      
    - name: Run tests
      run: npm run test:ci
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/money_flow_test
        JWT_SECRET: test-jwt-secret
        NEXTAUTH_SECRET: test-nextauth-secret
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # Optional
        directory: ./coverage
        fail_ci_if_error: false
        
  unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        
  api:
    name: API Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: money_flow_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup test environment
      run: |
        cp .env.example .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/money_flow_test" >> .env.test
        echo "JWT_SECRET=test-jwt-secret" >> .env.test
        echo "NEXTAUTH_SECRET=test-nextauth-secret" >> .env.test
    
    - name: Initialize testing database
      run: |
        npm run db:init
        npm run db:seed
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/money_flow_test
        
    - name: Run API tests
      run: npm run test:api
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/money_flow_test
        JWT_SECRET: test-jwt-secret
        NEXTAUTH_SECRET: test-nextauth-secret
        
  db:
    name: Database Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: money_flow_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup test environment
      run: |
        cp .env.example .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/money_flow_test" >> .env.test
    
    - name: Run database tests
      run: npm run test:db
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/money_flow_test
        
  build:
    name: Build Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
      env:
        NODE_ENV: production
  
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: money_flow_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Cache Cypress binary
      uses: actions/cache@v3
      with:
        path: ~/.cache/Cypress
        key: cypress-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          cypress-${{ runner.os }}-
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup environment variables
      run: |
        cp .env.example .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/money_flow_test" >> .env.test
        echo "JWT_SECRET=test-jwt-secret" >> .env.test
        echo "NEXTAUTH_SECRET=test-nextauth-secret" >> .env.test
    
    - name: Initialize testing database
      run: |
        npm run db:init
        npm run db:seed
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/money_flow_test
    
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: test
    
    - name: Start application
      run: npm run start & sleep 5
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/money_flow_test
        JWT_SECRET: test-jwt-secret
        NEXTAUTH_SECRET: test-nextauth-secret
        PORT: 3000
    
    - name: Run Cypress tests
      uses: cypress-io/github-action@v5
      with:
        browser: chrome
        headed: false
        wait-on: 'http://localhost:3000'
        wait-on-timeout: 30
        record: false
        config-file: cypress.config.js
      env:
        NODE_ENV: test
        CYPRESS_BASE_URL: http://localhost:3000
        CYPRESS_API_URL: http://localhost:3000/api
    
    - name: Upload screenshots if tests fail
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots
        if-no-files-found: ignore
    
    - name: Upload videos
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: cypress/videos
        if-no-files-found: ignore
    
    - name: Generate test report
      if: always()
      run: npx mochawesome-merge cypress/results/*.json > cypress/report.json
    
    - name: Upload test report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-report
        path: cypress/report.json
        if-no-files-found: ignore

